name: CICD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '*'

jobs:

  setup-and-run-tests:
    runs-on: ubuntu-latest
    env:
      POSTGRES_USER: "username"
      POSTGRES_PASSWORD: "password"
      POSTGRES_DB: "database"
      POSTGRES_HOST: "localhost"
      AWS_ACCESS_KEY_ID: ""
      AWS_SECRET_ACCESS_KEY: ""
      AWS_REGION: ""
      AWS_BUCKET_NAME: ""
      AWS_SESSION_TOKEN: ""
      AWS_ACCOUNT_ID: ""
    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install library
        run: poetry install --no-interaction

      - name: Run tests with coverage
        run: poetry run pytest --cov=src --cov-report=xml:coverage.xml --cov-report=term


  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Test Pipeline variables
        run: |
          echo "Test Pipeline variables"
          echo "AWS_REGION: ${{ secrets.AWS_REGION }}"
          echo "AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}"

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}


      - name: Create terraform.tfvars.json
        run: |
          cd terraform
          echo '{
            "aws_access_key_id": "${{ secrets.AWS_ACCESS_KEY_ID }}",
            "aws_secret_access_key": "${{ secrets.AWS_SECRET_ACCESS_KEY }}",
            "aws_session_token": "${{ secrets.AWS_SESSION_TOKEN }}",
            "region_default": "${{ secrets.AWS_REGION }}",
            "account_id": "${{ secrets.AWS_ACCOUNT_ID }}"
          }' > terraform.tfvars.json

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.0

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -out=tf.plan -var-file=terraform.tfvars.json

      - name: Terraform Apply
        if: github.event_name == 'push'
        run: |
          cd terraform
          terraform apply -auto-approve tf.plan

  image-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      # AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY_NAME }}
    needs: [setup-and-run-tests, terraform]
    # if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: |
          docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:latest .

      - name: Push Docker image to ECR
        run: |
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:latest

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

      - name: Restart Deployment
        run: |
          kubectl rollout restart deployment video-to-zip-service-api